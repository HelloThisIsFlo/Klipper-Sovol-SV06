#####################################################################
#      Input Shaping
#####################################################################

[gcode_macro SETUP_FOR_RINGING_TOWER]
gcode:
    {% set baseline = params.BASELINE|default(False) %}

    ECHO DEBUG="Setting up for Ringing Tower"
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL=7000 SQUARE_CORNER_VELOCITY=5
    SET_PRESSURE_ADVANCE ADVANCE=0
    {% if baseline %}
        ECHO DEBUG="BASELINE: ON => Deactivating existing Input Shapers"
        SET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0
    {% endif %}
    TUNING_TOWER COMMAND=SET_VELOCITY_LIMIT PARAMETER=ACCEL START=1500 STEP_DELTA=500 STEP_HEIGHT=5

# [include ./input-shaping.cfg] # Uncomment only AFTER plugging RPi Pico w/ ADXL (& comment again after plugging it out)


#####################################################################
#      MECHANICAL_GANTRY_CALIBRATION
#####################################################################

###############################################################################
#  Source https://github.com/strayr/strayr-k-macros/blob/e0807570a66d28735cf05143b105ab4ea6d9798f/mechanical_level_tmc2209.cfg
#
#  Mechanical Gantry Calibration
#
#  Requires TMC2209 drivers with UART control, some tuning and perhaps
#  some printed endstops.
#
#  Based on on (depricated) M915 and now alternate G34 from Marlin
#  I beleive Prusa use this, certainly there's older videos advising to just
#  ram the gantry at full current into the the z-max stops.
#
#  It moves the gantry to the top of the travel, drops the current and then
#  does a force move to force the steppers to stall against the physical end
#  stops, transfering the level of the frame to the gantry.
#
#  This is the only way to programatically level a multi-stepper single-driver
#  gantry. It may also help with a dual-driver gantry on a bed-slinger design
#  or where the plane of the bed is less trustworthy than the frame.
#
#  It's particularly risky doing Z_TILT_ADJUST and SCREWS_TILT_CALCULATE
#  without a mechanical reference as if one side of the gantry or bed is prone
#  to droop, over time both bed and gantry will skew excessively but still read
#  as level, so this can help transfer "level" from the frame to the gantry and
#  then to the bed.
#
#  I don't recommend doing this in a START_PRINT, I call this if a
#  SCREWS_TILT_CALCULATE shows some drift, althoughon an Ender 3 type printer
#  it's prudent to check the v-slot rollers for correct adjustment if drift is
#  observed.
#
#  It's probably best to run this and then do SCREWS_TILT_CALCULATE
#  until the bed is really level. IF you have dual Z steppers you can then
#  use Z_TILT_ADJUST for subsequent leveling of the gantry but make sure you
#  use the same points for gantry level as you use in SCREWS_TILT_CALCULATE
#
#  It may damage your printer if you do this at too high a current, or don't
#  have proper endstops.
#
#            HERE BE DRAGONS!
#            YOU WERE WARNED!
#
#  Here's a video of this in action
#  https://www.youtube.com/watch?v=aVdIeIIpUAk
#  and the endstops for 2020 v-slot
#  https://www.thingiverse.com/thing:4848479


[force_move]
# Needed for MECHANICAL_GANTRY_CALIBRATION
enable_force_move: true ; enable FORCE_MOVE and SET_KINEMATIC_POSITION

[gcode_macro MECHANICAL_GANTRY_CALIBRATION]
gcode:
    ### SET THIS DEFAULT CARFULLY - start really low
    {% set my_current = params.CURRENT|default(0.30)|float %} ; adjust crash current on the fly :D
    ###
    {% set oldcurrent = printer.configfile.settings["tmc2209 stepper_z"].run_current %}
    {% set oldhold = printer.configfile.settings["tmc2209 stepper_z"].hold_current %}
    {% set x_max = printer.toolhead.axis_maximum.x %}
    {% set y_max = printer.toolhead.axis_maximum.y %}
    {% set z_max = printer.toolhead.axis_maximum.z %}
    {% set fast_move_z = printer.configfile.settings["printer"].max_z_velocity %}
    {% set fast_move = printer.configfile.settings["printer"].max_velocity %}
    ###
    {% set grind_dist_mm = 10 %}
    {% set buffer = 2 %} ; Keep below 5mm
    ###
  # M117 XXXXXXXXXXXXXXXX
    M117 Z cal. running
    {% if printer.homed_axes != 'xyz' %}
        G28 ; Home All Axes
    {% endif %}
    G90 ; absolute
    G0 X{x_max / 2} Y{y_max / 2} F{fast_move * 30 } ;put toolhead in the center of the gantry

    G0 Z{z_max} F{fast_move_z * 60 } ; go to the Z-max at speed max z speed ; CHANGED

    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={my_current} ; drop current on Z stepper

    {% if printer.configfile.settings["stepper_z1"] %} ; test for dual Z
        SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={my_current} ; drop current
    {% endif %}

    BEEP I=4
    G4 P200 ; Probably not necessary, it is here just for sure

    SET_KINEMATIC_POSITION Z={z_max - grind_dist_mm - buffer} ; Trick printer into beleiving the gantry is lower than it is

    G91 ; relative
    G1 Z{grind_dist_mm} F{6 * 60} ; Grind against the top
    G90 ; back to absolute
    # Wait for visual check, with countdown
    G4 P1000
    BEEP I=1
    G4 P1000
    BEEP I=1
    G4 P1000
    BEEP I=1
    G4 P1000
    BEEP I=1

    G1 Z{z_max - 3 * buffer} F{6 * 60} ; move 4mm down
    G4 P200 ; Probably not necessary, it is here just for sure
    SET_TMC_CURRENT STEPPER=stepper_z CURRENT={oldcurrent} HOLDCURRENT={oldhold}
    {% if printer.configfile.settings["stepper_z1"] %} ; test for dual Z
        SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={oldcurrent} HOLDCURRENT={oldhold} ; reset current
    {% endif %}

    G0 Z{10 - buffer} F{fast_move_z * 60 } ; Quickly move back near the bed, for faster G28
    G4 P200 ; Probably not necessary, it is here just for sure
    G28 Z ; we MUST home again as the ganty is really in the wrong place.

  # M117 XXXXXXXXXXXXXXXX
    M117 Z cal. success!
    BEEP I=4
    M117

[gcode_macro G34]
gcode:
    MECHANICAL_GANTRY_CALIBRATION

[menu __main __setup __calib __mech_gantry_calibrate]
type: command
enable: {not printer.idle_timeout.state == "Printing"}
name: G34 Gantry Level
gcode:
    G34


#####################################################################
#      TEST_SPEED
#####################################################################

# NOTE This macro is not ready for use. ☠️☠️☠️
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro TEST_SPEED]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern
            # Diagonals
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
            
            # Box
            G0 X{x_min} Y{y_min} F{speed*60}
            G0 X{x_min} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_max} F{speed*60}
            G0 X{x_max} Y{y_min} F{speed*60}
        
        # Small pattern
            # Small diagonals 
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
            
            # Small box
            G0 X{x_center_min} Y{y_center_min} F{speed*60}
            G0 X{x_center_min} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_max} F{speed*60}
            G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        G28
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED